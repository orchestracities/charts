apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "crate.fullname" . }}
  labels:
    app: {{ template "crate.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  selector:
    matchLabels:
      app: {{ template "crate.name" . }}
  serviceName: {{ template "crate.fullname" . }}
  replicas: {{ .Values.crate.replicas }}
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: {{ template "crate.name" . }}
        release: {{ .Release.Name }}
        {{- if .Values.podAnnotations }}
        annotations:
{{ toYaml .Values.podAnnotations | indent 8 }}
        {{- end }}
    spec:
    {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName }}
    {{- end }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds}}
      initContainers:
      - name: init-sysctl
        image: busybox
        imagePullPolicy: IfNotPresent
        command: ["sysctl", "-w", "vm.max_map_count=262144"]
        securityContext:
          privileged: true
      containers:
      - name: crate
        image: {{ .Values.image.name }}:{{ .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command:
          - /docker-entrypoint.sh
          - -Clicense.enterprise=false
          - -Ccluster.name=${CLUSTER_NAME}
          - -Cnetwork.host="0.0.0.0"
          - -Cdiscovery.zen.hosts_provider=srv
          - -Cdiscovery.zen.minimum_master_nodes=${MINIMUM_MASTER_NODES}
          - -Cdiscovery.srv.query=_{{ .Values.service.clusterName }}._tcp.{{ template "crate.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local
          - -Cgateway.recover_after_nodes=${RECOVER_AFTER_NODES}
          - -Cgateway.recover_after_time={{ .Values.crate.recoverAfterTime }}
          - -Cgateway.expected_nodes=${EXPECTED_NODES}
          - -Chttp.cors.enabled={{ .Values.http.cors.enabled }}
          - -Chttp.cors.allow-origin={{ .Values.http.cors.allowOrigin }}
        volumeMounts:
            - mountPath: /data
              name: data
        resources:
{{ toYaml .Values.resources | indent 10 }}
        ports:
        - containerPort: {{ .Values.service.adminPort }}
          name: {{ .Values.service.adminName }}
        - containerPort: {{ .Values.service.clusterPort }}
          name: {{ .Values.service.clusterName }}
        - containerPort: {{ .Values.service.postgresPort }}
          name: {{ .Values.service.postgresName }}
        env:
        - name: CRATE_HEAP_SIZE
          value: {{ .Values.crate.createHeapSize | quote }}
        - name: EXPECTED_NODES
          value: {{ .Values.crate.replicas | quote }}
        - name: CLUSTER_NAME
          value: {{ .Values.crate.clusterName | quote }}
        - name: RECOVER_AFTER_NODES
          value: {{ .Values.crate.recoverAfterNodes | quote }}
        - name: MINIMUM_MASTER_NODES
          value: {{ .Values.crate.minimumMasterNodes | quote }}
        {{- if .Values.livenessProbe.enabled }}
        livenessProbe:
          exec:
            command: ["sh", "-c", "curl -I http://localhost:4200 2&>/dev/null | grep '\"200\" : true'"]
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          successThreshold: {{ .Values.livenessProbe.successThreshold }}
        {{- end }}
        {{- if .Values.readinessProbe.enabled }}
        readinessProbe:
          exec:
            command: ["sh", "-c", "curl http://localhost:4200 2&>/dev/null | grep '\"ok\" : true'"]
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}
        {{- end }}
      {{- if or .Values.antiAffinity .Values.nodeAffinity }}
      affinity:
      {{- end }}
      {{- if eq .Values.antiAffinity "hard" }}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  app: "{{ template "crate.name" . }}"
                  release: "{{ .Release.Name }}"
      {{- else if eq .Values.antiAffinity "soft" }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: kubernetes.io/hostname
              labelSelector:
                matchLabels:
                  app: "{{ template "crate.name" . }}"
                  release: "{{ .Release.Name }}"
      {{- end }}
      {{- with .Values.nodeAffinity }}
        nodeAffinity:
        {{ toYaml . | indent 10 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
      {{- end }}
{{- if .Values.persistentVolume.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: data
        annotations:
        {{- range $key, $value := .Values.persistentVolume.annotations }}
          {{ $key }}: {{ $value }}
        {{- end }}
      spec:
        accessModes:
        {{- range .Values.persistentVolume.accessModes }}
          - {{ . | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistentVolume.size | quote }}
      {{- if .Values.persistentVolume.storageClass }}
        storageClassName: "{{ .Values.persistentVolume.storageClass }}"
      {{- end }}
{{- else }}
        - name: data
          emptyDir:
            medium: "Memory"
{{- end }}
