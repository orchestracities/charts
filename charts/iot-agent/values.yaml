# Default values for iot-agent.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
replicaCount: 1
image:
  repository: fiware/iotagent-ul
  tag: 1.9.0
  pullPolicy: Always

chaos:
  enabled: false

updateStrategy:
  rollingUpdate:
    maxUnavailable: 1
  type: RollingUpdate

autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 12
  targetAverageUtilization: 50

service:
  agentType: ul
  name: iotagent-ul
  type: ClusterIP
  annotations: {}
  # log level supported: DEBUG, INFO, ERROR, FATAL.
  logLevel: DEBUG
  # if this flag is activated, the IoT Agent will add a 'TimeInstant' metadata
  # attribute to all the attributes updateded from device information.
  timestamp: true
  dataExternalPort: 7896
  dataInternalPort: 7896
  configExternalPort: 4041
  configInternalPort: 4041
  # command: [ "bin/iotagent-ul", "config.js" ]
  # default service for the IoT Agent. If a device is being registered,
  # and no service information comes with the device data,
  # and no service information is configured for the given type,
  # the default IoT agent service will be used instead. E.g.: 'Antwerp'.
  defaultService: 'Default'
  # default subservice for the IoT Agent. If a device is being registered,
  # and no subservice information comes with the device data, and no subservice
  # information is configured for the given type, the default IoT agent
  # subservice will be used instead. E.g.: '/gardens'.
  defaultSubservice: '/'
  # URL to send in the Context Provider registration requests. Should represent
  # the external IP of the deployed IoT Agent (the IP where the Context Broker
  # will redirect the NGSI requests). E.g.: 'http://192.168.56.1:4041'.
  providerUrl: http://ul-iot-agent:4041
  # duration of the registrations as Context Providers,
  # in ISO 8601 standard format. E.g.: 'P1M'.
  deviceRegistrationDuration: P1M
  defaultType: Device
  # Default API Key, to use with device that have been provisioned
  # without a Configuration Group.
  defaultKey: T3JjaGVzdHJhQ2l0aWVzOi86RGV2aWNlczox
  # Default transport protocol when no transport is provisioned
  # through the Device Provisioning API.
  defaultTransport: HTTP

# Type Configuration
# 
# The IoT Agent can be configured to expect certain kinds of devices, with
# preconfigured sets of attributes, service information, security information
# and other attributes. The types attribute of the configuration is a map, where
# the key is the type name and the value is an object containing all the type
# information. Each type can has the following information configured:
# 
# - service: service of the devices of this type.
# - subservice: subservice of the devices of this type.
# - active: list of active attributes of the device. For each attribute,
#         its name and type must be provided.
# - lazy: list of lazy attributes of the device. For each attribute, its name
#       and type must be provided.
# - commands: list of commands attributes of the device. For each attribute,
#        its name and type must be provided.
# - internalAttributes: optional section with free format, to allow specific
#        IoT Agents to store information along with the devices in the
#        Device Registry.
# - staticAttributes: this array of attributes will be added to every entity 
#        of this type 'as is'.
# - trust: trust token to use for secured access to the Context Broker for 
#        this type of devices (optional; only needed for secured scenarios).
# - cbHost: Context Broker host url. This option can be used to override
#        the global CB configuration for specific types of devices.

types: {}

contextBroker:
  host: orion-orion.prod
  port: 1026
  ngsiVersion: 'v2'

mongo:
  # is the replicaset enabled?
  rsEnabled: true
  # The name of the replicaset iot-agent will attempt to connect to
  rs: rs
  # The hostname of the mongodb service
  dbhost: mongo-rs-mongodb-replicaset-0.mongo-rs-mongodb-replicaset.prod,mongo-rs-mongodb-replicaset-1.mongo-rs-mongodb-replicaset.prod,mongo-rs-mongodb-replicaset-2.mongo-rs-mongodb-replicaset.prod
  # The database name to be used for the agent
  dbname: ul-prod
  # The database name to be used for the agent
  dbport: 27017

amqp:
  enabled: true
  # amqp server hostname
  host: amqp.example.com
  # amqp server post
  port: 5672
  username: username
  password: password
  vhost: '/'

mqtt:
  # enable mqtt transport
  enabled: true
  # mqtt server hostname
  host: mqtt-mosquitto-interal
  # mqtt server post
  port: 1883
  username: username
  password: password

# configures all the information needed to register the IoT Agent in the
# IoTManager. If this section is present, the IoTA will try to register to a
# IoTAM in the host, port and path indicated, with the information configured
# in the object. The IoTAgent URL that will be reported will be the providedUrl
# (described below) with the added agentPath
iotManager:
  enabled: true
  host: iot-agent-manager-iot-agent-manager
  port: 8082
  path: /iot/protocols
  protocol: UL
  description: Ultralight 2.0 IoT Agent (Node.js version) supports HTTP/MQTT/AMQP protocols
  agentPath: /config/iot

ingress:
  enabled: false
  # Used to create an Ingress record.
  hosts:
    - iot-agent-ul.example.com
  annotations:
    kubernetes.io/ingress.class: nginx
    #kubernetes.io/tls-acme: "true"
  tls: {}
    # Secrets must be manually created in the namespace.
    # - secretName: chart-example-tls
    #   hosts:
    #     - chart-example.local
resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi
