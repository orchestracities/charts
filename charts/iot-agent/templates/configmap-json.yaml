{{- if eq .Values.agent.agentType "json" -}}
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: {{ template "iot-agent.name" . }}
    component: "{{ .Values.service.agentType }}"
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
  name: {{ template "iot-agent.fullname" . }}
data:
  config.js: |
    var config = {};


    {{- if .Values.mqtt.enabled }}
    config.mqtt = {
        host: {{ .Values.mqtt.host | quote }},
        port: {{ .Values.mqtt.port }},
        thinkingThingsPlugin: {{ .Values.mqtt.thinkingThingsPlugin | default false }},

        /**
         * protocol to use for connecting with the MQTT broker
         * (`mqtt`, `mqtts`, `tcp`, `tls`, `ws`, `wss`)
         */
        protocol: {{ .Values.mqtt.protocol |  default "mqtt" | quote}},

        {{- if .Values.mqtt.username }}
        /**
         * User name for the IoTAgent in the MQTT broker, if authentication is activated.
         */
        username: '{{ .Values.mqtt.username }}',
        {{- end }}

        {{- if .Values.mqtt.password }}
        /**
         * Password for the IoTAgent in the MQTT broker, if authentication is activated.
         */
        password: '{{ .Values.mqtt.password }}',
        {{- end }}

        {{- if .Values.mqtt.ssl.rejectUnauthorized }}
        /**
         * Set to `false` if using a self-signed certificate.
         * Beware that you are exposing yourself to man in the middle attacks
         */
        rejectUnauthorized: {{ .Values.mqtt.ssl.rejectUnauthorized }},
        {{- end }}

        {{- if .Values.mqtt.ssl.ca }}
        /**
         * Path to your certification authority for MQTT binding over SSL
         */
        ca: {{ .Values.mqtt.ssl.ca | quote }},
        {{- end }}

        {{- if .Values.mqtt.ssl.key }}
        /**
         * Path to your private key for MQTT binding over SSL
         */
        key: {{ .Values.mqtt.ssl.key | quote }},
        {{- end }}

        {{- if .Values.mqtt.ssl.cert }}
        /**
         * Path to your certificate for MQTT binding over SSL
         */
        cert: {{ .Values.mqtt.ssl.cert | quote }},
        {{- end }}

        {{- if .Values.mqtt.qos }}
        /**
         * QoS level: at most once (0), at least once (1), exactly once (2). (default is 0).
         */
        qos: {{ .Values.mqtt.qos }},
        {{- end }}

        {{- if .Values.mqtt.retain }}
        /**
         * Retain flag. (default is true.) Normally if a publisher publishes a message to a topic, and no one is
         * subscribed to that topic (i.e retain flag is set to false) the message is simply discarded by the broker.
         * The publisher can tell the broker to keep the last message on that topic by setting the retained message flag to true.
         */
        retain: {{ .Values.mqtt.retain }},
        {{- end }}

        /**
         * Number of MQTT connection error retries (default is 5).
         */
        retries: {{ .Values.mqtt.retries | default 5 }},

        /**
         * Time between MQTT connection retries (default is 5 seconds).
         */
        retryTime: {{ .Values.mqtt.retryTime | default 5 }},

        /**
         * Time to keep connection open between client and MQTT broker (default is 0 seconds)
         */
        keepalive: {{ .Values.mqtt.keepalive | default 0 }},

        {{- if .Values.mqtt.avoidLeadingSlash }}
        /**
         * Whether to use slashes at the beginning of topic when sending or not
         */
        avoidLeadingSlash: {{ .Values.mqtt.avoidLeadingSlash }}
        {{- end }}

    };
    {{- end }}

    {{- if .Values.amqp.enabled }}
    config.amqp = {
        host: {{ .Values.amqp.host | quote }},
        port: {{ .Values.amqp.port }},
        {{- if .Values.amqp.username }}
        username: {{ .Values.amqp.username | quote }},
        {{- end }}
        {{- if .Values.amqp.password }}
        password: {{ .Values.amqp.password | quote }},
        {{- end }}
        {{- if .Values.amqp.vhost }}
        vhost: {{ .Values.amqp.vhost | quote }},
        {{- end }}
        exchange: "iota-exchange",
        queue: "iotaqueue",
        options: {durable: true}
    };
    {{- end }}


    config.http = {
        port: {{ required "A valid service.dataInternalPort is required" .Values.service.dataInternalPort }},
        /**
         * HTTP Timeout for the http command endpoint (in milliseconds).
         */
        timeout: {{ .Values.http.timeout | default 1000 }},
        {{- if .Values.http.key }}
        /**
         * Path to your private key for HTTPS binding
         */
        key: {{ .Values.http.key | quote }},
        {{- end }}

        {{- if .Values.http.cert }}
        /**
         * Path to your certificate for HTTPS binding
         */
        cert: {{ .Values.http.cert | quote }},
        {{- end }}
    };

    config.iota = {
        logLevel: '{{ .Values.agent.logLevel | default "DEBUG" }}',
        timestamp: {{ .Values.agent.timestamp | default true }},
        contextBroker: {
            host: '{{ required "A valid contextBroker.host is required" .Values.contextBroker.host }}',
            port: {{ required "A valid contextBroker.port is required" .Values.contextBroker.port }},
            ngsiVersion: {{ .Values.contextBroker.ngsiVersion | quote }}
        },
        server: {
            port: {{ required "A valid service.configInternalPort is required" .Values.service.configInternalPort }},
            baseRoot: '/config'
        },


        /**
         * Configuration for secured access to instances of the Context Broker secured with a PEP Proxy.
         * For the authentication mechanism to work, the authentication attribute in the configuration has to be fully
         * configured, and the authentication.enabled subattribute should have the value `true`.
         *
         * The Username and password should be considered as sensitive data and should not be stored in plaintext.
         * Either encrypt the config and decrypt when initializing the instance or use environment variables secured by
         * docker secrets.
         */
        authentication: {
          enabled: false,
          /**
           * Type of the Identity Manager which is used when authenticating the IoT Agent.
           * Either 'oauth2' or 'keystone'
           */
          type: 'keystone',
          /**
           * Name of the additional header passed to retrieve the identity of the IoT Agent
           */
          header: 'Authorization',
          /**
           * Hostname of the Identity Manager.
           */
          host: 'localhost',
          /**
           * Port of the Identity Manager.
           */
          port: '5000',
          /**
           * URL of the Identity Manager - a combination of the above
           */
          url: 'localhost:5000',
          /**
           * KEYSTONE ONLY: Username for the IoT Agent
           *  - Note this should not be stored in plaintext.
           */
          user: 'IOTA_AUTH_USER',
          /**
           * KEYSTONE ONLY: Password for the IoT Agent
           *    - Note this should not be stored in plaintext.
           */
          password: 'IOTA_AUTH_PASSWORD',
          /**
           * OAUTH2 ONLY: URL path for retrieving the token
           */
          tokenPath: '/oauth2/token',
          /**
           * OAUTH2 ONLY: Flag to indicate whether or not the token needs to be periodically refreshed.
           */
          permanentToken: true,
          /**
           * OAUTH2 ONLY: ClientId for the IoT Agent
           *    - Note this should not be stored in plaintext.
           */
          clientId: 'IOTA_AUTH_CLIENT_ID',
          /**
           * OAUTH2 ONLY: ClientSecret for the IoT Agent
           *    - Note this should not be stored in plaintext.
           */
          clientSecret: 'IOTA_AUTH_CLIENT_SECRET'
        },

        deviceRegistry: {
            type: 'mongodb'
        },
        mongodb: {
            host: '{{ required "A valid mongo.dbhost is required" .Values.mongo.dbhost }}',
            port: {{ required "A valid mongo.dbport is required" .Values.mongo.dbport }},
            db: '{{ required "A valid mongo.dbname is required" .Values.mongo.dbname }}',
            {{ if .Values.mongo.rsEnabled -}}replicaSet: '{{ .Values.mongo.rs }}'{{- end }}
        },
        {{- if .Values.iotManager.enabled }}
        iotManager: {
          host: '{{ .Values.iotManager.host }}',
          port: {{ .Values.iotManager.port }},
          path: '{{ .Values.iotManager.path }}',
          protocol: '{{ .Values.iotManager.protocol }}',
          description: '{{ .Values.iotManager.description | default "A generic protocol" }}',
          agentPath: '{{ .Values.iotManager.agentPath | default "/iot" }}'
        },
        {{- end }}
        types: {{ toJson .Values.types }},
        service: '{{ required "A valid agent.defaultService is required" .Values.agent.defaultService }}',
        subservice: '{{ required "A valid agent.defaultSubservice is required" .Values.agent.defaultSubservice }}',
        {{- if .Values.agent.providerUrl }}
        providerUrl: '{{ .Values.agent.providerUrl }}',
        {{- else if .Values.ingress.enabled }}
        providerUrl: 'https://{{ index .Values.ingress.hosts 0 }}/config',
        {{- else }}
        providerUrl: 'http://{{ .Release.Name }}-{{ template "iot-agent.name" . }}.{{ .Release.Namespace }}:{{ .Values.service.configExternalPort }}',
        {{- end }}
        {{- if .Values.agent.autocast }}
        autocast: {{ .Values.agent.autocast }},
        {{- end }}
        deviceRegistrationDuration: '{{ required "A valid agent.deviceRegistrationDuration is required" .Values.agent.deviceRegistrationDuration }}',
        defaultType: '{{ required "A valid agent.defaultType is required" .Values.agent.defaultType }}',
        defaultResource: '/iot/{{ .Release.Name }}',
        /**
         * flag indicating whether the incoming measures to the IoTAgent should be processed as per the "attributes" field.
         */
        explicitAttrs: {{ .Values.agent.explicitAttrs | default false }}
    };

    /**
     * flag indicating whether the incoming notifications to the IoTAgent should be processed using the bidirectionality
     * plugin from the latest versions of the library or the UL-specific configuration retrieval mechanism.
     */
    config.configRetrieval = {{ .Values.agent.configRetrieval | default false }};

    config.defaultKey = '{{ required "A valid agent.defaultKey is required" .Values.agent.defaultKey }}';
    config.defaultTransport = '{{ required "A valid agent.defaultTransport is required" .Values.agent.defaultTransport }}';
    /**
     * flag indicating whether the node server will be executed in multi-core option (true) or it will be a
     * single-thread one (false).
     */
    config.multiCore = {{ .Values.agent.multiCore | default true }};
    config.defaultExpressionLanguage = {{ .Values.agent.defaultExpressionLanguage | quote }};
    module.exports = config;
{{- end -}}
